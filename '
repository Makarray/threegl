if ( ! Detector.webgl ) Detector.addGetWebGLMessage();

// important variables:
var trafficVelocity = new THREE.Vector3(-.4,0,0);
var trafficWidth = trafficHeight = 10;
var screenWidth = window.innerWidth,
	 screenHeight = window.innerHeight;



// @see http://paulirish.com/2011/requestanimationframe-for-smart-animating/
window.requestAnimFrame = (function(){
  return  window.requestAnimationFrame       || 
          window.webkitRequestAnimationFrame || 
          window.mozRequestAnimationFrame    || 
          window.oRequestAnimationFrame      || 
          window.msRequestAnimationFrame     || 
          function(/* function */ callback, /* DOMElement */ element){
            window.setTimeout(callback, 1000 / 60);
          };
})();

document.bgColor = '#000000';
var renderer = Detector.webgl? new THREE.WebGLRenderer(): new THREE.CanvasRenderer();
var scene = new THREE.Scene();
var camera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 0.1, 10000);

renderer.setSize(window.innerWidth, window.innerHeight);

document.body.appendChild(renderer.domElement);

var worldWidth = unproject(window.innerWidth,window.innerHeight).x - 
					unproject(0,0).x;
var worldWidth = unproject(window.innerWidth,window.innerHeight).y - 
					unproject(0,0).y;

var pointLight = new THREE.PointLight( 0xFFFFFF );
pointLight.position.x = 20;
pointLight.position.y = 20;
pointLight.position.z = 20;
pointLight.distance = 200;
scene.add(pointLight);

var light_amb = new THREE.AmbientLight( 0x151515 );
scene.add(light_amb);
/* Begin creating objects and rendering */


var loaded = false;
loader = new THREE.JSONLoader();
loader.load("ship.js", function(geo, mat) {
	shipMat = new THREE.MeshFaceMaterial(mat);
	var shipMesh = new THREE.Mesh(geo,shipMat);
	scene.add(shipMesh);
	loaded = true;
	},
	"./images"
);

function waitForLoad(){
	if (!loaded)
		setTimeout(200, waitForLoad);
}
waitForLoad();
console.log(shipMesh);

shipMesh.scale = 2;
shipMesh.position.z = 15;



var geometry = new THREE.CubeGeometry(5,5,5);
var material = new THREE.MeshLambertMaterial( { color: 0x00aa00 });
var cube = new THREE.Mesh( geometry, material );
cube.moveVector = new THREE.Vector3(1,0,0);
cube.position.x = -20;
cube.width = 10;
cube.height = 10;
scene.add(cube);

var geo_wall = new THREE.PlaneGeometry(80,50);
var mat_wall = new THREE.MeshLambertMaterial( { color: 0x000088 });
var mesh_wall = new THREE.Mesh( geo_wall, mat_wall);
mesh_wall.position.z = -5;
//scene.add(mesh_wall);

var lightsphere = new THREE.Mesh (
		new THREE.SphereGeometry(2,10,10),
		new THREE.MeshBasicMaterial( {color: 0xFFFFFF})
		);
lightsphere.position = pointLight.position;
scene.add(lightsphere);


/* ******************************************
 * Begin creating incomming objects
 * ******************************************/

var startTraffic = 12,
	 maxTraffic = 16;
	 trafficHolder = new Array();

for (iterator=0; iterator < startTraffic; iterator++) {
	var tX = Math.floor(iterator / 4.0) * (trafficHeight + 40) + gaussian(10, 60),
		tY = (iterator % 4) * trafficHeight - (13) ,
		tZ = cube.position.z;

	//console.log(startTraffic);
	var tempCube = new THREE.Mesh(
			new THREE.CubeGeometry(trafficWidth, trafficHeight, trafficWidth),
			new THREE.MeshLambertMaterial( {color: 0x880000,
														transparent: true,
														opacity: 0.7}));

	tempCube.velocity = trafficVelocity;
	tempCube.position.set(tX, tY, tZ);
	trafficHolder.push(tempCube);
	scene.add(tempCube);
}

//********************************************
// Particle system goes here
function waitUntilMouse(){
	if (!mouseMoved){
		setTimeout(waitUntilMouse,200);
	}
}
waitUntilMouse();

var particleCount = 2200,
	 particles = new THREE.Geometry(),
	 pMaterial = new THREE.ParticleBasicMaterial({
		color: 0x22FF44,
		size: 1,
		map: THREE.ImageUtils.loadTexture("images/particle.png"),
		blending: THREE.AdditiveBlending,
		transparent: true
	 });
//individual particles
for (var p = 0; p < particleCount; p++) {
	var pX = cube.position.x-4.5 + Math.random() * 2;
		pY = gaussian(.5,cube.position.y);
		pZ = gaussian(.5, cube.position.z);
		particle = new THREE.Vector3(pX, pY, pZ);
		particle.velocity = trafficVelocity.clone(),
		particle.lifeSpan = gaussian(20,60);
		particle.currentTick = 0;

	particles.vertices.push(particle);
}

var particleSystem = new THREE.ParticleSystem(
		particles, pMaterial);
particleSystem.position.z = cube.position.z;
particleSystem.sortParticles = true;
scene.add(particleSystem);

//Begin background particles
var bgColors = new Array();
var bgParticleCount = 400,
	 bgRows = 15,
	 bgCols = 80,
	 bgSize = 2,
	 bgPad = -.6,
	 bgParticles = new THREE.Geometry(),
	 bgpMaterial = new THREE.ParticleBasicMaterial({
		//color: 0xFFFFFF,
		size:bgSize,
		blending: THREE.AdditiveBlending,
		transparent: false,
		vertexColors: THREE.VertexColors
	 });
bgpMaterial.opacity = .2;

for (var r=0; r < bgRows; r++){
	for (var c=0; c < bgCols; c++){
		pX = (c*(bgSize + bgPad));
		pY = (r*(bgSize + bgPad));
		pZ = 0;
		particle = new THREE.Vector3(pX,pY,pZ);
		particle.amplitude = gaussian(.1,.3);
		particleColor = new THREE.Color(0x444444);

		bgParticles.vertices.push(particle);
		bgParticles.colors.push(particleColor);
	}
}

var bgParticleSystem = new THREE.ParticleSystem(
	bgParticles, bgpMaterial);
bgParticleSystem.position.y = cube.position.y - (bgRows*(bgSize + bgPad))/2;
bgParticleSystem.position.x = cube.position.x - (bgCols*(bgSize + bgPad))/3;
bgParticleSystem.position.z = cube.position.z - 5;
scene.add(bgParticleSystem);

camera.position.z = 30;

/* ******************************
 * Animation Loop
 * ******************************/
//we'll be checking for collisions every animation so make the caster once
var raycaster = new THREE.Raycaster();
	 nextDirection = new THREE.Vector3();
var frameWait = 3;
function animate() {

	var pCount = particleCount;
	while (pCount--) {
		var particle = particles.vertices[pCount];

		if (particle.currentTick > particle.lifeSpan) {
		particle.x = gaussian(.2,cube.position.x-2.4);
		particle.y = gaussian(.5,cube.position.y);
		particle.velocity.x = -.2;
		particle.currentTick = 0;
		}

		particle.add(particle.velocity);
		particle.currentTick++;
	}

	//flag changes to particles
	particleSystem.geometry.verticesNeedUpdate = true;

	//animate particle background
	//var bgCount = Math.floor(Math.random() * bgCols * bgRows);
	if (frameWait-- <= 0) {
		var bgCount = bgRows * bgCols;
		while (bgCount--){
			//tempColor = new THREE.Color().setRGB(Math.random()*.6, Math.random()*.6, Math.random()*.6);
			tempColor = trafficHolder[0].material.color
			bgParticles.colors[bgCount] = tempColor;
		}

		//flag changes to particles
		bgParticleSystem.geometry.colorsNeedUpdate = true;
		frameWait = 3;

	}




	//animate traffic
	var tCount = trafficHolder.length;
	while (tCount--) {
		var tempCube = trafficHolder[tCount];

		if (tempCube.position.x < -60){
			tempCube.position.x = gaussian(trafficWidth,80);
		} else {

			for (var rayIndex=0; rayIndex < 5; rayIndex++){
				posX = tempCube.position.x;
				posY = (tempCube.position.y+(trafficHeight/2.0)) - (rayIndex)*(trafficHeight/4.0);
				posZ = tempCube.position.z;
				tempPos = new THREE.Vector3(posX,posY,posZ);
				raycaster.set(tempPos,trafficVelocity.clone());
				collision = raycaster.intersectObject(cube,true);
				if (collision.length > 0 && collision[0].distance <= trafficWidth/2){
					//console.log(collision);
				}
			}
		}

		tempCube.position.add(tempCube.velocity);
	}

  renderer.render(scene, camera);
  requestAnimFrame(animate);
}
requestAnimFrame(animate);

function gaussian(stdDev, mean){
	i = Math.random() * 2 -1 + Math.random() * 2 - 1 + Math.random() * 2 - 1 +
		Math.random() * 2 - 1;
	i = i * stdDev + mean;
	return i;
}
/* ******************************
 * Event Handlers
 * ******************************/
var tempDown = 0;
tempDown.x = 0;
tempDown.y = 0;
var called = false;
function onDown(e){
	tempDown = 1;
	tempDown.x = e.clientX;
	tempDown.y = e.clientY;
}

function onUp(e){
	tempDown = 0;
	tempDown.x = null;
	tempDown.y = null;
}

function mouseClick(e){
	if (tempDown && !called){
		called = true;
	}
	else if (!tempDown && called){
		called = false;
	}
}

function unproject(x,y){
	var projector = new THREE.Projector

	var vector = new THREE.Vector3(
		(x  / window.innerWidth ) * 2 - 1,
		-(y / window.innerHeight ) * 2 + 1,
		0 );

	projector.unprojectVector( vector, camera );
	var dir = vector.sub( camera.position ).normalize();
	var ray = new THREE.Raycaster( camera.position, dir );
	var distance = - camera.position.z / dir.z;
	var pos = camera.position.clone().add( dir.multiplyScalar( distance ) );
	return pos;
}

var mouseMoved = false;
var cubeCaster = new THREE.Raycaster();
function mouseMove(e){
	cube.lastPosition = cube.position.clone();
	cube.position.y = unproject(e.clientX,e.clientY).y;
	if (cube.position.y < -19) cube.position.y = -19;
	if (cube.position.y >19) cube.position.y =19;

	for (var i=0;i<cube.geometry.vertices.length;i++){
		cubeCaster.set(cube.position.clone(),
				cube.geometry.vertices[i].clone().add(cube.position).sub(cube.position));
		collideArray = cubeCaster.intersectObjects(trafficHolder,true);

		if (collideArray.length > 0){
			for (var j = 0; j < collideArray.length; j++){
				if (collideArray[j].distance <
						cube.position.distanceTo(cube.geometry.vertices[i].clone().add(cube.position))){
					//console.log(cube.geometry.vertices[i].clone().add(cube.position));
				}
			}
		}
	}

	bgParticleSystem.position.y = cube.position.y - (bgRows * (bgSize+bgPad))/2;
	mouseMoved = true;
}

function onWindowResize() {
	camera.aspect = window.innerWidth / window.innerHeight;
	camera.updateProjectionMatrix();

	renderer.setSize( window.innerWidth, window.innerHeight );
}

function keyboard(e){
	if (e.keyCode == 49){
	} else if (e.keyCode == 50){
	} else if (e.keyCode == 51){
	} else if (e.keyCode == 52){
	}
}

document.addEventListener("mousemove",mouseMove, false);
document.onkeypress = keyboard;
window.addEventListener("resize", onWindowResize, false);
//make sure there is no curosor
document.onselectstart = function() {
	return false;
};
/* ******************************
 * Render function 
 * *****************************/
function render() {
	requestAnimationFrame(render);
	renderer.render(scene, camera);
}
render();
